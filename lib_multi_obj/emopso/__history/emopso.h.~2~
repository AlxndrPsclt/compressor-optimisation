#ifndef EFILE_H
#define EFILE_H

#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <vector>
#include <math.h>

#include "../libEvolOptimizer/ICMultiObjectiveOptimizer.h"

using namespace std;

class EPSs{
public:
  vector<double> eps;
};

class Particle{
public:
  vector<double> vel;
  vector<double> constraints;
  vector<double>  x;
  vector<double>  nx;
  vector<double>  fx;
  vector<double>  xpbest;
  vector<double>  fxpbest;
  vector<EPSs> epss;
  int subswarm;
  Particle(int _dimensions, int _objectives, int _constraints);
  CMultiObjectiveSolution * convertToCMultiObjectiveSolution() ;
  //Particle(const Particle & other);

};

class EFILE{

  vector<double> tlb,tub;
  int ndimensions;
  int nobjectives;
  int nconstr;
  int nsolutions;
  int nclusters;
  int allnsolutions;
  int maxsolutions;
  bool hasentered;
  bool firsttime;
  vector<double> xtlb,xtub;
  vector<int> nsolutionsbyswarm;
  bool hasclusteredfirsttime;
  int pmsize;
  double ** proximitymatrix;
  int ** proximitymatrixindex;
public:
  bool updatematrix;
  vector<double> EPS;
  vector<Particle> solutions;
  vector<Particle> allsolutions;
  void init(int _ndimensions, int _nobjectives, int _nclusters,int _maxsolutions, int maxbests, int nconstr);
  EFILE();
  int nClusteredSolutions(int _whichcluster);
  int selectClusteredSolution(int _whichcluster,int _whichsolution);
  //  void add(vector<Particle> &_sol);
  //void add(Particle _s);
  CMultiObjectiveSolutionSet * output();
  bool add(Particle &_s,int _whichcluster=-1);
  bool addAll(Particle &_s);
  void clear();
  void update();
  bool reAdd();
  void finalSolutions();
  void deleteExcedent();
  int falseReAdd();
  void printSolutions();
  int  domine(Particle &_a, Particle &_b);
  int  dominePBest(Particle &_a);
  int  domine1(Particle&_a, Particle&_b);
  int  domine1PBest(Particle &_a);
  int  domine2(Particle&_a, Particle&_b);
  int  domine2PBest(Particle&_a);
  double  euclideanDistance(vector<double> &_a,vector<double> &_b);
  void normalizeDistances1();
  void normalizeDistances2();

  int deleteFromCluster(int _whichsolution);
  void add2Cluster(int _whichcluster);
  int substractFromTo(int _from, int _to, int _quantity);
  int updateClusters(vector<int> &_whichparticles);

  void normalizeDistances();
  void hierarchicalClustering();
  void createProximityMatrix();
  void copy2Column(int _i);
  void copy2Row(int _i);
  void findLowestValue(int *_i,int *_j);
  void deleteRow(int _j);
  void deleteColumn(int _i);
  void joinColumns(int _i,int _j);

  int selectRandomSolution(int _whichcluster);
  int selectClusteredRandomSolution(int _whichcluster);
  double rnd(double _min,double _max);
  int nSolutions();
};






class EMOPSO : public ICMultiObjectiveOptimizer {

friend class EFILE;

public:
  EMOPSO();
  ~EMOPSO();

  void run();
  virtual const char* getName() {return "EMOPSO";}
  void setNumberOfClusters(int n);
  int getNuberOfClusters();

	private :
  int _numberOfClusters;

  double rnd(double _min,double _max);
  void function(int _w);

  void computeConstraints(int i);
  void computeObjectives(int i);

  void alocateMemory();

  void initialize();
  int selectGBest(int _swarm);
  void flight();
  void execute();
  void copyx(vector<double> &_a,vector<double> &_b);
  void copyfx(vector<double> &_a,vector<double> &_b);
  void copy(vector<double> &_a,vector<double> &_b);
  void addClusters();
  int selectGbest(int _whichcluster);
  void perturbation(int );

  vector<double> lb,ub;
  int ndimensions;
  int nobjectives;
  int nconstr;
  int nparticles;
  int gmax;
  vector<Particle> particles;
  double W,C1,C2;
  int nclusters;
  EFILE archive;
  int gen;

};

#endif

